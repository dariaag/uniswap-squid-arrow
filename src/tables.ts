import { Database } from "@subsquid/file-store";
import { S3Dest } from "@subsquid/file-store-s3";
import {
  Column,
  Table,
  Compression,
  Types,
} from "@subsquid/file-store-parquet";

export const dbOptions = {
  tables: {
    CreateFactoryTable: new Table(
      "Factory.parquet",
      {
        id: Column(Types.String()),
        poolCount: Column(Types.Int64()),
        txCount: Column(Types.Int64()),
        totalVolumeUSD: Column(Types.Float()),
        totalVolumeETH: Column(Types.Float()),
        totalFeesUSD: Column(Types.Float()),
        totalFeesETH: Column(Types.Float()),
        totalValueLockedUSD: Column(Types.Float()),
        totalValueLockedETH: Column(Types.Float()),
        totalValueLockedUSDUntracked: Column(Types.Float()),
        totalValueLockedETHUntracked: Column(Types.Float()),
      },

      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateBundleTable: new Table(
      "Bundle.parquet",
      {
        id: Column(Types.String()),
        ethPriceUSD: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTokenTable: new Table(
      "Token.parquet",
      {
        id: Column(Types.String()),
        symbol: Column(Types.String()),
        name: Column(Types.String()),
        decimals: Column(Types.Int32()),
        totalSupply: Column(Types.Int64()),
        volume: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        untrackedVolumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        txCount: Column(Types.Int64()),
        poolCount: Column(Types.Int64()),
        totalValueLocked: Column(Types.Float()),
        totalValueLockedUSD: Column(Types.Float()),
        totalValueLockedUSDUntracked: Column(Types.Float()),
        derivedETH: Column(Types.Float()),
        whitelistPools: Column(Types.List(Types.String())),
        tokenDayData: Column(Types.List(Types.String())),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreatePoolTable: new Table(
      "Pool.parquet",
      {
        id: Column(Types.String()),
        createdAtTimestamp: Column(Types.Timestamp()),
        createdAtBlockNumber: Column(Types.Int64()),
        token0Id: Column(Types.String()),
        token1Id: Column(Types.String()),
        token0: Column(Types.String()),
        token1: Column(Types.String()),
        feeTier: Column(Types.Int32()),
        liquidity: Column(Types.Int64()),
        sqrtPrice: Column(Types.Int64()),
        feeGrowthGlobal0X128: Column(Types.Int64()),
        feeGrowthGlobal1X128: Column(Types.Int64()),
        token0Price: Column(Types.Float()),
        token1Price: Column(Types.Float()),
        tick: Column(Types.Int32()),
        observationIndex: Column(Types.Int64()),
        volumeToken0: Column(Types.Float()),
        volumeToken1: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        untrackedVolumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        txCount: Column(Types.Int64()),
        collectedFeesToken0: Column(Types.Float()),
        collectedFeesToken1: Column(Types.Float()),
        collectedFeesUSD: Column(Types.Float()),
        totalValueLockedToken0: Column(Types.Float()),
        totalValueLockedToken1: Column(Types.Float()),
        totalValueLockedUSD: Column(Types.Float()),
        totalValueLockedETH: Column(Types.Float()),
        totalValueLockedUSDUntracked: Column(Types.Float()),
        liquidityProviderCount: Column(Types.Int64()),
        poolHourData: Column(Types.List(Types.String())),
        poolDayData: Column(Types.List(Types.String())),
        mints: Column(Types.List(Types.String())),
        burns: Column(Types.List(Types.String())),
        swaps: Column(Types.List(Types.String())),
        ticks: Column(Types.List(Types.String())),
        collects: Column(Types.List(Types.String())),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTickTable: new Table(
      "Tick.parquet",
      {
        id: Column(Types.String()),
        poolAddress: Column(Types.String()),
        tickIdx: Column(Types.Int64()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        liquidityNet: Column(Types.Int64()),
        liquidityGross: Column(Types.Int64()),
        price0: Column(Types.Float()),
        price1: Column(Types.Float()),
        volumeToken0: Column(Types.Float()),
        volumeToken1: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        untrackedVolumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        collectedFeesToken0: Column(Types.Float()),
        collectedFeesToken1: Column(Types.Float()),
        collectedFeesUSD: Column(Types.Float()),
        createdAtTimestamp: Column(Types.Timestamp()),
        createdAtBlockNumber: Column(Types.Int64()),
        liquidityProviderCount: Column(Types.Int64()),
        feeGrowthOutside0X128: Column(Types.Int64()),
        feeGrowthOutside1X128: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreatePositionTable: new Table(
      "Position.parquet",
      {
        id: Column(Types.String()),
        owner: Column(Types.String()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        token0Id: Column(Types.String()),
        token0: Column(Types.String()),
        token1Id: Column(Types.String()),
        token1: Column(Types.String()),
        liquidity: Column(Types.Int64()),
        depositedToken0: Column(Types.Float()),
        depositedToken1: Column(Types.Float()),
        withdrawnToken0: Column(Types.Float()),
        withdrawnToken1: Column(Types.Float()),
        collectedFeesToken0: Column(Types.Float()),
        collectedFeesToken1: Column(Types.Float()),
        feeGrowthInside0LastX128: Column(Types.Int64()),
        feeGrowthInside1LastX128: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreatePositionSnapshotTable: new Table(
      "PositionSnapshot.parquet",
      {
        id: Column(Types.String()),
        owner: Column(Types.String()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        positionId: Column(Types.String()),
        position: Column(Types.String()),
        timestamp: Column(Types.Timestamp()),
        blockNumber: Column(Types.Int64()),
        liquidity: Column(Types.Int64()),
        depositedToken0: Column(Types.Float()),
        depositedToken1: Column(Types.Float()),
        withdrawnToken0: Column(Types.Float()),
        withdrawnToken1: Column(Types.Float()),
        collectedFeesToken0: Column(Types.Float()),
        collectedFeesToken1: Column(Types.Float()),
        feeGrowthInside0LastX128: Column(Types.Int64()),
        feeGrowthInside1LastX128: Column(Types.Int64()),
        transaction: Column(Types.String()),
        transactionid: Column(Types.String()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTransactionTable: new Table(
      "Trasanction.parquet",
      {
        id: Column(Types.String()),
        blockNumber: Column(Types.Int64()),
        timestamp: Column(Types.Timestamp()),
        gasUsed: Column(Types.Int64()),
        gasPrice: Column(Types.Int64()),
        mints: Column(Types.List(Types.String())),
        burns: Column(Types.List(Types.String())),
        swaps: Column(Types.List(Types.String())),
        collects: Column(Types.List(Types.String())),
        flashed: Column(Types.List(Types.String())),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateMintTable: new Table(
      "Mint.parquet",
      {
        id: Column(Types.String()),
        transactionId: Column(Types.String()),
        transaction: Column(Types.String()),
        timestamp: Column(Types.Timestamp()),
        pool: Column(Types.String()),
        poolId: Column(Types.String()),
        token0: Column(Types.String()),
        token0Id: Column(Types.String()),
        token1: Column(Types.String()),
        token1Id: Column(Types.String()),
        owner: Column(Types.String()),
        sender: Column(Types.String()),
        origin: Column(Types.String()),
        amount0: Column(Types.Float()),
        amount1: Column(Types.Float()),
        amount: Column(Types.Int64()),
        amountUSD: Column(Types.Float()),
        tickLower: Column(Types.Int64()),
        tickUpper: Column(Types.Int64()),
        tickCurrent: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateBurnTable: new Table(
      "Burn.parquet",
      {
        id: Column(Types.String()),
        transactionId: Column(Types.String()),
        transaction: Column(Types.String()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        token0: Column(Types.String()),
        token0Id: Column(Types.String()),
        token1: Column(Types.String()),
        token1Id: Column(Types.String()),
        timestamp: Column(Types.Timestamp()),
        owner: Column(Types.String()),
        origin: Column(Types.String()),
        amount: Column(Types.Int64()),
        amount0: Column(Types.Float()),
        amount1: Column(Types.Float()),
        amountUSD: Column(Types.Float()),
        tickLower: Column(Types.Int64()),
        tickUpper: Column(Types.Int64()),
        logIndex: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateSwapTable: new Table(
      "Swap.parquet",
      {
        id: Column(Types.String()),
        transactionId: Column(Types.String()),
        transaction: Column(Types.String()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        token0: Column(Types.String()),
        token0Id: Column(Types.String()),
        token1: Column(Types.String()),
        token1Id: Column(Types.String()),
        timestamp: Column(Types.Timestamp()),
        sender: Column(Types.String()),
        origin: Column(Types.String()),
        recipient: Column(Types.String()),
        amount0: Column(Types.Float()),
        amount1: Column(Types.Float()),
        amountUSD: Column(Types.Float()),
        tick: Column(Types.Int64()),
        logIndex: Column(Types.Int64()),
        sqrtPriceX96: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateCollectTable: new Table(
      "Collect.parquet",
      {
        id: Column(Types.String()),
        transactionId: Column(Types.String()),
        transaction: Column(Types.String()),
        timestamp: Column(Types.Timestamp()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        owner: Column(Types.String()),
        amount0: Column(Types.Float()),
        amount1: Column(Types.Float()),
        tickLower: Column(Types.Int64()),
        tickUpper: Column(Types.Int64()),
        logIndex: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateFlashTable: new Table(
      "Flash.parquet",
      {
        id: Column(Types.String()),
        transactionId: Column(Types.String()),
        transaction: Column(Types.String()),
        timestamp: Column(Types.Timestamp()),
        poolId: Column(Types.String()),
        pool: Column(Types.String()),
        sender: Column(Types.String()),
        recipient: Column(Types.String()),
        amount0: Column(Types.Float()),
        amount1: Column(Types.Float()),
        amountUSD: Column(Types.Float()),
        amount0Paid: Column(Types.Float()),
        amount1Paid: Column(Types.Float()),
        logIndex: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateUniswapDayDataTable: new Table(
      "UniswapDayData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        volumeUSD: Column(Types.Float()),
        volumeETH: Column(Types.Float()),
        volumeUSDUntracked: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        txCount: Column(Types.Int64()),
        tvlUSD: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreatePoolDayDataTable: new Table(
      "PoolDayData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        pool: Column(Types.String()),
        poolId: Column(Types.String()),
        liquidity: Column(Types.Int64()),
        sqrtPrice: Column(Types.Int64()),
        token0Price: Column(Types.Float()),
        token1Price: Column(Types.Float()),
        tick: Column(Types.Int64()),
        feeGrowthGlobal0X128: Column(Types.Int64()),
        feeGrowthGlobal1X128: Column(Types.Int64()),
        tvlUSD: Column(Types.Float()),
        volumeToken0: Column(Types.Float()),
        volumeToken1: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        txCount: Column(Types.Int64()),
        open: Column(Types.Float()),
        high: Column(Types.Float()),
        low: Column(Types.Float()),
        close: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreatePoolHourDataTable: new Table(
      "PoolDayData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        pool: Column(Types.String()),
        poolId: Column(Types.String()),
        liquidity: Column(Types.Int64()),
        sqrtPrice: Column(Types.Int64()),
        token0Price: Column(Types.Float()),
        token1Price: Column(Types.Float()),
        tick: Column(Types.Int64()),
        feeGrowthGlobal0X128: Column(Types.Int64()),
        feeGrowthGlobal1X128: Column(Types.Int64()),
        tvlUSD: Column(Types.Float()),
        volumeToken0: Column(Types.Float()),
        volumeToken1: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        txCount: Column(Types.Int64()),
        open: Column(Types.Float()),
        high: Column(Types.Float()),
        low: Column(Types.Float()),
        close: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTickHourDataTable: new Table(
      "TickHourData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        pool: Column(Types.String()),
        poolId: Column(Types.String()),
        tickId: Column(Types.Int64()),
        tick: Column(Types.Int64()),
        liquidityGross: Column(Types.Int64()),
        liquidityNet: Column(Types.Int64()),
        volumeToken0: Column(Types.Float()),
        volumeToken1: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTickDayDataTable: new Table(
      "TickDayData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        pool: Column(Types.String()),
        poolId: Column(Types.String()),
        tickId: Column(Types.Int64()),
        tick: Column(Types.Int64()),
        liquidityGross: Column(Types.Int64()),
        liquidityNet: Column(Types.Int64()),
        volumeToken0: Column(Types.Float()),
        volumeToken1: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        feesUSD: Column(Types.Float()),
        feeGrowthOutside0X128: Column(Types.Int64()),
        feeGrowthOutside1X128: Column(Types.Int64()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTokenDayDataTable: new Table(
      "TokenDayData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        token: Column(Types.String()),
        tokenId: Column(Types.String()),
        volume: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        totalValueLocked: Column(Types.Float()),
        totalValueLockedUSD: Column(Types.Float()),
        priceUSD: Column(Types.Float()),
        feedUSD: Column(Types.Float()),
        open: Column(Types.Float()),
        high: Column(Types.Float()),
        low: Column(Types.Float()),
        close: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
    CreateTokenHourDataTable: new Table(
      "TokenHourData.parquet",
      {
        id: Column(Types.String()),
        date: Column(Types.Timestamp()),
        token: Column(Types.String()),
        tokenId: Column(Types.String()),
        volume: Column(Types.Float()),
        volumeUSD: Column(Types.Float()),
        totalValueLocked: Column(Types.Float()),
        untrackedVolumeUSD: Column(Types.Float()),
        totalValueLockedUSD: Column(Types.Float()),
        priceUSD: Column(Types.Float()),
        feedUSD: Column(Types.Float()),
        open: Column(Types.Float()),
        high: Column(Types.Float()),
        low: Column(Types.Float()),
        close: Column(Types.Float()),
      },
      {
        compression: "GZIP",
        rowGroupSize: 300000,
        pageSize: 1000,
      }
    ),
  },
  dest: new S3Dest(
    "./",
    "uniswapV3-data-v1", //assertNotNull(process.env.S3_BUCKET_NAME),
    {
      region: "us-east-1",

      endpoint:
        "https://7a28e49ec5f4a60c66f216392792ac38.r2.cloudflarestorage.com",
      credentials: {
        accessKeyId: "23bc17fc38195e53ca473c041cda2d57", //accessKeyId: assertNotNull(process.env.S3_ACCESS_KEY_ID),
        secretAccessKey:
          "aff576a8c30a23b0c1b4983c9e4c14e6a60560e876dc55a03098ce731bfd6bd3", // secretAccessKey: assertNotNull(process.env.S3_SECRET_ACCESS_KEY)
      },
    }
  ),
  chunkSizeMb: 10,
};
